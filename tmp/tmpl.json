{
    "Description": "Root Stack for AWS Amplify Console",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "DeploymentBucketName": {
            "Type": "String",
            "Default": "DeploymentBucket",
            "Description": "Name of the common deployment bucket provided by the parent stack"
        },
        "AuthRoleName": {
            "Type": "String",
            "Default": "AuthRoleName",
            "Description": "Name of the common deployment bucket provided by the parent stack"
        },
        "UnauthRoleName": {
            "Type": "String",
            "Default": "UnAuthRoleName",
            "Description": "Name of the common deployment bucket provided by the parent stack"
        }
    },
    "Outputs": {
        "Region": {
            "Description": "CloudFormation provider root stack Region",
            "Value": {
                "Ref": "AWS::Region"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-Region"
                }
            }
        },
        "StackName": {
            "Description": "CloudFormation provider root stack ID",
            "Value": {
                "Ref": "AWS::StackName"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-StackName"
                }
            }
        },
        "StackId": {
            "Description": "CloudFormation provider root stack name",
            "Value": {
                "Ref": "AWS::StackId"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-StackId"
                }
            }
        },
        "AuthRoleArn": {
            "Value": {
                "Fn::GetAtt": ["AuthRole", "Arn"]
            }
        },
        "UnauthRoleArn": {
            "Value": {
                "Fn::GetAtt": ["UnauthRole", "Arn"]
            }
        },
        "DeploymentBucketName": {
            "Description": "CloudFormation provider root stack deployment bucket name",
            "Value": {
                "Ref": "DeploymentBucketName"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-DeploymentBucketName"
                }
            }
        },
        "AuthRoleName": {
            "Value": {
                "Ref": "AuthRole"
            }
        },
        "UnauthRoleName": {
            "Value": {
                "Ref": "UnauthRole"
            }
        }
    },
    "Resources": {
        "DeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "DeploymentBucketName"
                },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain"
        },
        "AuthRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Deny",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity"
                        }
                    ]
                },
                "RoleName": {
                    "Ref": "AuthRoleName"
                }
            }
        },
        "UnauthRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Deny",
                            "Principal": {
                                "Federated": "cognito-identity.amazonaws.com"
                            },
                            "Action": "sts:AssumeRoleWithWebIdentity"
                        }
                    ]
                },
                "RoleName": {
                    "Ref": "UnauthRoleName"
                }
            }
        },
        "apiaterbruketwebapp": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/api/cloudformation-template.json",
                "Parameters": {
                    "AppSyncApiName": "aterbruketwebapp",
                    "DynamoDBBillingMode": "PAY_PER_REQUEST",
                    "DynamoDBEnableServerSideEncryption": false,
                    "AuthCognitoUserPoolId": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.UserPoolId"
                        ]
                    },
                    "S3DeploymentBucket": "amplify-aterbruketwebapp-release-103017-deployment",
                    "S3DeploymentRootKey": "amplify-appsync-files/17479d494f352c77d2471901e44082d7be5e1895",
                    "OpenSearchInstanceType": "t3.small.elasticsearch",
                    "env": "release"
                }
            }
        },
        "authaterbruketwebapp75287c9a": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/auth/aterbruketwebapp75287c9a-cloudformation-template.json",
                "Parameters": {
                    "identityPoolName": "aterbruketwebapp75287c9a_identitypool_75287c9a",
                    "allowUnauthenticatedIdentities": true,
                    "resourceNameTruncated": "aterbr75287c9a",
                    "userPoolName": "aterbruketwebapp75287c9a_userpool_75287c9a",
                    "autoVerifiedAttributes": "email",
                    "mfaConfiguration": "OFF",
                    "mfaTypes": "SMS Text Message",
                    "smsAuthenticationMessage": "Your authentication code is {####}",
                    "smsVerificationMessage": "Your verification code is {####}",
                    "emailVerificationSubject": "Your verification code",
                    "emailVerificationMessage": "Your verification code is {####}",
                    "defaultPasswordPolicy": false,
                    "passwordPolicyMinLength": 8,
                    "passwordPolicyCharacters": "",
                    "requiredAttributes": "email",
                    "aliasAttributes": "",
                    "userpoolClientGenerateSecret": true,
                    "userpoolClientRefreshTokenValidity": 30,
                    "userpoolClientWriteAttributes": "email",
                    "userpoolClientReadAttributes": "email",
                    "userpoolClientLambdaRole": "aterbr75287c9a_userpoolclient_lambda_role",
                    "userpoolClientSetAttributes": false,
                    "authSelections": "identityPoolAndUserPool",
                    "resourceName": "aterbruketwebapp75287c9a",
                    "serviceName": "Cognito",
                    "useDefault": "default",
                    "sharedId": "75287c9a",
                    "userPoolGroupList": "user,administrator",
                    "authRoleArn": {
                        "Fn::GetAtt": ["AuthRole", "Arn"]
                    },
                    "unauthRoleArn": {
                        "Fn::GetAtt": ["UnauthRole", "Arn"]
                    },
                    "breakCircularDependency": false,
                    "useEnabledMfas": false,
                    "dependsOn": "",
                    "env": "release"
                }
            }
        },
        "authuserPoolGroups": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/auth/userPoolGroups-cloudformation-template.json",
                "Parameters": {
                    "AuthRoleArn": {
                        "Fn::GetAtt": ["AuthRole", "Arn"]
                    },
                    "UnauthRoleArn": {
                        "Fn::GetAtt": ["UnauthRole", "Arn"]
                    },
                    "authaterbruketwebapp75287c9aUserPoolId": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.UserPoolId"
                        ]
                    },
                    "authaterbruketwebapp75287c9aAppClientIDWeb": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.AppClientIDWeb"
                        ]
                    },
                    "authaterbruketwebapp75287c9aAppClientID": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.AppClientID"
                        ]
                    },
                    "authaterbruketwebapp75287c9aIdentityPoolId": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.IdentityPoolId"
                        ]
                    },
                    "env": "release"
                }
            }
        },
        "functionaddUserToGroup": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/function/addUserToGroup-cloudformation-template.json",
                "Parameters": {
                    "deploymentBucketName": "amplify-aterbruketwebapp-release-103017-deployment",
                    "s3Key": "amplify-builds/addUserToGroup-376169397959496e2b38-build.zip",
                    "env": "release"
                }
            }
        },
        "functionemailnotification": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/function/emailnotification-cloudformation-template.json",
                "Parameters": {
                    "deploymentBucketName": "amplify-aterbruketwebapp-release-103017-deployment",
                    "s3Key": "amplify-builds/emailnotification-2b582f6f3162394f4c76-build.zip",
                    "sesAppUrl": "https://develop.d21bj89y0jdxx1.amplifyapp.com",
                    "cognitoUserPoolId": "eu-west-1_9Qg6o7POD",
                    "sesRecycleRecipientEmail": "Niclas.Ranlind@helsingborg.se",
                    "sesSenderEmail": "aterbruket.amf@helsingborg.se",
                    "sesBorrowRecipientEmail": "Niclas.Ranlind@helsingborg.se",
                    "apiaterbruketwebappGraphQLAPIIdOutput": {
                        "Fn::GetAtt": [
                            "apiaterbruketwebapp",
                            "Outputs.GraphQLAPIIdOutput"
                        ]
                    },
                    "apiaterbruketwebappGraphQLAPIEndpointOutput": {
                        "Fn::GetAtt": [
                            "apiaterbruketwebapp",
                            "Outputs.GraphQLAPIEndpointOutput"
                        ]
                    },
                    "env": "release"
                }
            }
        },
        "functionmigrateADUser": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/function/migrateADUser-cloudformation-template.json",
                "Parameters": {
                    "deploymentBucketName": "amplify-aterbruketwebapp-release-103017-deployment",
                    "s3Key": "amplify-builds/migrateADUser-31346948323134427144-build.zip",
                    "cognitoUserPoolId": "eu-west-1_9Qg6o7POD",
                    "cognitoUserPoolClientId": "15rojv7pkqvagkakpm70ku7dlh",
                    "apiaterbruketwebappGraphQLAPIIdOutput": {
                        "Fn::GetAtt": [
                            "apiaterbruketwebapp",
                            "Outputs.GraphQLAPIIdOutput"
                        ]
                    },
                    "apiaterbruketwebappGraphQLAPIEndpointOutput": {
                        "Fn::GetAtt": [
                            "apiaterbruketwebapp",
                            "Outputs.GraphQLAPIEndpointOutput"
                        ]
                    },
                    "env": "release"
                }
            }
        },
        "functionscheduledNotifications": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/function/scheduledNotifications-cloudformation-template.json",
                "Parameters": {
                    "CloudWatchRule": "cron(45 11 * * ? *)",
                    "deploymentBucketName": "amplify-aterbruketwebapp-release-103017-deployment",
                    "s3Key": "amplify-builds/scheduledNotifications-49444367454e76775550-build.zip",
                    "reservationDaysUntilNotifications": "7",
                    "reservationDaysUntilCancellation": "14",
                    "sesSenderEmail": "aterbruket.amf@helsingborg.se",
                    "sesAppUrl": "https://develop.d21bj89y0jdxx1.amplifyapp.com",
                    "opensearchUrl": "https://search-amplify-opense-9v8syau2vha5-7lieox3uiy5e3kmf5k2mpjb4ae.eu-west-1.es.amazonaws.com/",
                    "borrowDaysBeforeReminder": "0",
                    "apiaterbruketwebappGraphQLAPIIdOutput": {
                        "Fn::GetAtt": [
                            "apiaterbruketwebapp",
                            "Outputs.GraphQLAPIIdOutput"
                        ]
                    },
                    "apiaterbruketwebappGraphQLAPIEndpointOutput": {
                        "Fn::GetAtt": [
                            "apiaterbruketwebapp",
                            "Outputs.GraphQLAPIEndpointOutput"
                        ]
                    },
                    "authaterbruketwebapp75287c9aUserPoolId": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.UserPoolId"
                        ]
                    },
                    "env": "release"
                }
            }
        },
        "storagestorage": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://s3.amazonaws.com/amplify-aterbruketwebapp-release-103017-deployment/amplify-cfn-templates/storage/s3-cloudformation-template.json",
                "Parameters": {
                    "bucketName": "aterbruketwebappfb9e8d3df77b4e03b81085295d61497",
                    "authPolicyName": "s3_amplify_6d3755d1",
                    "unauthPolicyName": "s3_amplify_6d3755d1",
                    "authRoleName": {
                        "Ref": "AuthRoleName"
                    },
                    "unauthRoleName": {
                        "Ref": "UnauthRoleName"
                    },
                    "selectedGuestPermissions": "s3:PutObject,s3:GetObject,s3:ListBucket,s3:DeleteObject",
                    "selectedAuthenticatedPermissions": "s3:PutObject,s3:GetObject,s3:ListBucket,s3:DeleteObject",
                    "s3PermissionsAuthenticatedPublic": "s3:PutObject,s3:GetObject,s3:DeleteObject",
                    "s3PublicPolicy": "Public_policy_74da3915",
                    "s3PermissionsAuthenticatedUploads": "s3:PutObject",
                    "s3UploadsPolicy": "Uploads_policy_74da3915",
                    "s3PermissionsAuthenticatedProtected": "s3:PutObject,s3:GetObject,s3:DeleteObject",
                    "s3ProtectedPolicy": "Protected_policy_bf204b42",
                    "s3PermissionsAuthenticatedPrivate": "s3:PutObject,s3:GetObject,s3:DeleteObject",
                    "s3PrivatePolicy": "Private_policy_bf204b42",
                    "AuthenticatedAllowList": "ALLOW",
                    "s3ReadPolicy": "read_policy_74da3915",
                    "s3PermissionsGuestPublic": "s3:PutObject,s3:GetObject,s3:DeleteObject",
                    "s3PermissionsGuestUploads": "s3:PutObject",
                    "GuestAllowList": "ALLOW",
                    "triggerFunction": "NONE",
                    "authaterbruketwebapp75287c9aUserPoolId": {
                        "Fn::GetAtt": [
                            "authaterbruketwebapp75287c9a",
                            "Outputs.UserPoolId"
                        ]
                    },
                    "authuserPoolGroupsuserGroupRole": {
                        "Fn::GetAtt": [
                            "authuserPoolGroups",
                            "Outputs.userGroupRole"
                        ]
                    },
                    "authuserPoolGroupsadministratorGroupRole": {
                        "Fn::GetAtt": [
                            "authuserPoolGroups",
                            "Outputs.administratorGroupRole"
                        ]
                    },
                    "env": "release"
                }
            }
        },
        "UpdateRolesWithIDPFunction": {
            "DependsOn": [
                "AuthRole",
                "UnauthRole",
                "authaterbruketwebapp75287c9a"
            ],
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const response = require('cfn-response');",
                                "const aws = require('aws-sdk');",
                                "let responseData = {};",
                                "exports.handler = function(event, context) {",
                                "  try {",
                                "    let authRoleName = event.ResourceProperties.authRoleName;",
                                "    let unauthRoleName = event.ResourceProperties.unauthRoleName;",
                                "    let idpId = event.ResourceProperties.idpId;",
                                "    let promises = [];",
                                "    let getPromises = [];",
                                "    let authParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}}}]};",
                                "    let unauthParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}}}]};",
                                "    if (event.RequestType == 'Delete') {",
                                "        delete authParamsJson.Statement[0].Condition;",
                                "        delete unauthParamsJson.Statement[0].Condition;",
                                "        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
                                "        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
                                "        const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                                "        getPromises.push(iam.getRole({RoleName: authParams.RoleName}).promise());",
                                "        getPromises.push(iam.getRole({RoleName: unauthParams.RoleName}).promise());",
                                "        Promise.all(getPromises)",
                                "         .then((res) => {",
                                "        console.log('in res' , res)",
                                "           promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
                                "           promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
                                "           return Promise.all(promises)",
                                "             .then((res) => {",
                                "               console.log(\"delete response data\" + JSON.stringify(res));",
                                "               response.send(event, context, response.SUCCESS, {});",
                                "             });",
                                "          })",
                                "           .catch((err) => {",
                                "             console.log(err.stack);",
                                "             responseData = {Error: err};",
                                "             response.send(event, context, response.SUCCESS, responseData);",
                                "             })",
                                "    }",
                                "    if (event.RequestType == 'Update' || event.RequestType == 'Create') {",
                                "       const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                                "        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
                                "        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
                                "        promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
                                "        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
                                "        Promise.all(promises)",
                                "         .then((res) => {",
                                "            console.log(\"createORupdate\" + res);",
                                "            console.log(\"response data\" + JSON.stringify(res));",
                                "            response.send(event, context, response.SUCCESS, {});",
                                "         });",
                                "    }",
                                "  } catch(err) {",
                                "       console.log(err.stack);",
                                "       responseData = {Error: err};",
                                "       response.send(event, context, response.FAILED, responseData);",
                                "       throw err;",
                                "  }",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs14.x",
                "Timeout": 300,
                "Role": {
                    "Fn::GetAtt": ["UpdateRolesWithIDPFunctionRole", "Arn"]
                }
            }
        },
        "UpdateRolesWithIDPFunctionOutputs": {
            "Type": "Custom::LambdaCallout",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": ["UpdateRolesWithIDPFunction", "Arn"]
                },
                "region": {
                    "Ref": "AWS::Region"
                },
                "idpId": {
                    "Fn::GetAtt": [
                        "authaterbruketwebapp75287c9a",
                        "Outputs.IdentityPoolId"
                    ]
                },
                "authRoleName": {
                    "Ref": "AuthRole"
                },
                "unauthRoleName": {
                    "Ref": "UnauthRole"
                }
            }
        },
        "UpdateRolesWithIDPFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AuthRole"
                            },
                            "-idp"
                        ]
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["lambda.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "UpdateRolesWithIDPFunctionPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:UpdateAssumeRolePolicy",
                                        "iam:GetRole"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": ["AuthRole", "Arn"]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:UpdateAssumeRolePolicy",
                                        "iam:GetRole"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": ["UnauthRole", "Arn"]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    }
}
